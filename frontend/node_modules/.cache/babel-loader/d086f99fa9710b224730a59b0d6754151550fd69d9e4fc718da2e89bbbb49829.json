{"ast":null,"code":"var _jsxFileName = \"/Users/danielrad/Desktop/QZ/Coding/Facultate/PS/StackUnderflow/frontend/src/services/UserContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { userService } from './api';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    currentUser,\n    isAuthenticated\n  } = useContext(AuthContext);\n  const [userStats, setUserStats] = useState(null);\n  const [userActivities, setUserActivities] = useState([]);\n  const [loadingStats, setLoadingStats] = useState(false);\n  const [loadingActivities, setLoadingActivities] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load user statistics when the user is authenticated\n  useEffect(() => {\n    const loadUserStats = async () => {\n      if (!isAuthenticated || !currentUser || !currentUser.id) {\n        return;\n      }\n      setLoadingStats(true);\n      try {\n        const statsResponse = await userService.getUserStatistics(currentUser.id);\n        setUserStats(statsResponse.data);\n        setError(null);\n      } catch (err) {\n        console.error('Error loading user stats:', err);\n        setError('Failed to load user statistics');\n      } finally {\n        setLoadingStats(false);\n      }\n    };\n    loadUserStats();\n  }, [isAuthenticated, currentUser]);\n\n  // Fetch user activities\n  const fetchUserActivities = async userId => {\n    if (!userId) return;\n    setLoadingActivities(true);\n    try {\n      const activitiesResponse = await userService.getUserActivity(userId);\n      setUserActivities(activitiesResponse.data);\n      setError(null);\n      return activitiesResponse.data;\n    } catch (err) {\n      console.error('Error loading user activities:', err);\n      setError('Failed to load user activities');\n      return [];\n    } finally {\n      setLoadingActivities(false);\n    }\n  };\n\n  // Refresh user statistics\n  const refreshUserStats = async (userId = null) => {\n    const targetUserId = userId || (currentUser ? currentUser.id : null);\n    if (!targetUserId) return;\n    setLoadingStats(true);\n    try {\n      const statsResponse = await userService.getUserStatistics(targetUserId);\n      setUserStats(statsResponse.data);\n      setError(null);\n      return statsResponse.data;\n    } catch (err) {\n      console.error('Error refreshing user stats:', err);\n      setError('Failed to refresh user statistics');\n      return null;\n    } finally {\n      setLoadingStats(false);\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (userId, profileData) => {\n    if (!userId) return {\n      success: false,\n      error: 'User ID is required'\n    };\n    try {\n      await userService.updateUserProfile(userId, profileData);\n\n      // If updating the current user, refresh stats\n      if (currentUser && userId === currentUser.id) {\n        await refreshUserStats();\n      }\n      return {\n        success: true\n      };\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error updating user profile:', err);\n      return {\n        success: false,\n        error: ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Failed to update profile'\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      userStats,\n      userActivities,\n      loadingStats,\n      loadingActivities,\n      error,\n      fetchUserActivities,\n      refreshUserStats,\n      updateUserProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"q9OCRFL4XrapMMeyGlCNLFru82s=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","userService","AuthContext","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","currentUser","isAuthenticated","userStats","setUserStats","userActivities","setUserActivities","loadingStats","setLoadingStats","loadingActivities","setLoadingActivities","error","setError","loadUserStats","id","statsResponse","getUserStatistics","data","err","console","fetchUserActivities","userId","activitiesResponse","getUserActivity","refreshUserStats","targetUserId","updateUserProfile","profileData","success","_err$response","_err$response$data","response","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["/Users/danielrad/Desktop/QZ/Coding/Facultate/PS/StackUnderflow/frontend/src/services/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { userService } from './api';\nimport { AuthContext } from './AuthContext';\n\nexport const UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n  const { currentUser, isAuthenticated } = useContext(AuthContext);\n  const [userStats, setUserStats] = useState(null);\n  const [userActivities, setUserActivities] = useState([]);\n  const [loadingStats, setLoadingStats] = useState(false);\n  const [loadingActivities, setLoadingActivities] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load user statistics when the user is authenticated\n  useEffect(() => {\n    const loadUserStats = async () => {\n      if (!isAuthenticated || !currentUser || !currentUser.id) {\n        return;\n      }\n      \n      setLoadingStats(true);\n      try {\n        const statsResponse = await userService.getUserStatistics(currentUser.id);\n        setUserStats(statsResponse.data);\n        setError(null);\n      } catch (err) {\n        console.error('Error loading user stats:', err);\n        setError('Failed to load user statistics');\n      } finally {\n        setLoadingStats(false);\n      }\n    };\n\n    loadUserStats();\n  }, [isAuthenticated, currentUser]);\n\n  // Fetch user activities\n  const fetchUserActivities = async (userId) => {\n    if (!userId) return;\n    \n    setLoadingActivities(true);\n    try {\n      const activitiesResponse = await userService.getUserActivity(userId);\n      setUserActivities(activitiesResponse.data);\n      setError(null);\n      return activitiesResponse.data;\n    } catch (err) {\n      console.error('Error loading user activities:', err);\n      setError('Failed to load user activities');\n      return [];\n    } finally {\n      setLoadingActivities(false);\n    }\n  };\n\n  // Refresh user statistics\n  const refreshUserStats = async (userId = null) => {\n    const targetUserId = userId || (currentUser ? currentUser.id : null);\n    if (!targetUserId) return;\n    \n    setLoadingStats(true);\n    try {\n      const statsResponse = await userService.getUserStatistics(targetUserId);\n      setUserStats(statsResponse.data);\n      setError(null);\n      return statsResponse.data;\n    } catch (err) {\n      console.error('Error refreshing user stats:', err);\n      setError('Failed to refresh user statistics');\n      return null;\n    } finally {\n      setLoadingStats(false);\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (userId, profileData) => {\n    if (!userId) return { success: false, error: 'User ID is required' };\n    \n    try {\n      await userService.updateUserProfile(userId, profileData);\n      \n      // If updating the current user, refresh stats\n      if (currentUser && userId === currentUser.id) {\n        await refreshUserStats();\n      }\n      \n      return { success: true };\n    } catch (err) {\n      console.error('Error updating user profile:', err);\n      return { \n        success: false, \n        error: err.response?.data?.message || err.message || 'Failed to update profile'\n      };\n    }\n  };\n\n  return (\n    <UserContext.Provider\n      value={{\n        userStats,\n        userActivities,\n        loadingStats,\n        loadingActivities,\n        error,\n        fetchUserActivities,\n        refreshUserStats,\n        updateUserProfile\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = () => useContext(UserContext); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}