{"ast":null,"code":"import axios from 'axios';\n\n// Use direct backend URL instead of proxy\nconst API_URL = 'http://localhost:8080';\n\n// Add basic request/response interceptors\naxios.interceptors.request.use(request => {\n  return request;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  // Ensure both id and questionId are present in question objects\n  if (Array.isArray(response.data) && response.config.url.includes('/questions/')) {\n    response.data = response.data.map(item => {\n      // Handle case where questionId exists but id doesn't\n      if (item.questionId && !item.id) {\n        return {\n          ...item,\n          id: item.questionId\n        };\n      }\n      // Handle case where id exists but questionId doesn't\n      else if (item.id && !item.questionId) {\n        return {\n          ...item,\n          questionId: item.id\n        };\n      }\n      return item;\n    });\n  }\n  // Handle single question object\n  else if (response.data && !Array.isArray(response.data) && response.config.url.includes('/questions/')) {\n    const item = response.data;\n    if (item.questionId && !item.id) {\n      response.data = {\n        ...item,\n        id: item.questionId\n      };\n    } else if (item.id && !item.questionId) {\n      response.data = {\n        ...item,\n        questionId: item.id\n      };\n    }\n  }\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Create axios instance with CORS config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// User related API calls - Matches UserController endpoints\nexport const userService = {\n  login: (username, password) => apiClient.post(`/users/login`, {\n    username,\n    password\n  }),\n  register: (username, email, password, phoneNumber) => apiClient.post(`/users/create`, {\n    username,\n    email,\n    password,\n    phoneNumber\n  }),\n  getUserById: id => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    return apiClient.get(`/users/id/${id}`);\n  },\n  getUserByUsername: username => apiClient.get(`/users/username/${username}`),\n  updateUser: (id, data) => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    return apiClient.put(`/users/${id}`, data);\n  },\n  getAllUsers: () => apiClient.get(`/users/all`),\n  // Search for users by keyword\n  searchUsers: keyword => {\n    if (!keyword || keyword.trim() === '') {\n      return Promise.reject(new Error('Search keyword is required'));\n    }\n    return apiClient.get(`/users/search?keyword=${encodeURIComponent(keyword)}`);\n  },\n  // New methods for enhanced user profile functionality\n  getUserStatistics: id => {\n    // This would ideally be a backend endpoint, but we'll simulate it with data we already have\n    // In a real implementation, you would create this endpoint in the backend\n    return apiClient.get(`/users/id/${id}`).then(async response => {\n      const user = response.data;\n\n      // Get user's questions and answers\n      const [questionsRes, answersRes] = await Promise.all([apiClient.get(`/questions/author/${id}`), apiClient.get(`/answers/author/${id}`)]);\n      const questions = questionsRes.data || [];\n      const answers = answersRes.data || [];\n\n      // Calculate statistics\n      const stats = {\n        questionsCount: questions.length,\n        answersCount: answers.length,\n        acceptedAnswersCount: answers.filter(a => a.accepted).length,\n        totalVotes: questions.reduce((sum, q) => sum + (q.votes || 0), 0) + answers.reduce((sum, a) => sum + ((a.upvotes || 0) - (a.downvotes || 0)), 0),\n        joinDate: user.createdAt,\n        reputation: user.reputation || 0,\n        badges: user.badges || []\n      };\n      return {\n        data: stats\n      };\n    });\n  },\n  updateUserProfile: (id, profileData) => {\n    // Validate data\n    if (!profileData) {\n      return Promise.reject(new Error('Profile data is required'));\n    }\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n\n    // This would be a PUT request to update the profile\n    return apiClient.put(`/users/${id}`, profileData);\n  },\n  changePassword: (id, currentPassword, newPassword) => {\n    // Validate data\n    if (!currentPassword || !newPassword) {\n      return Promise.reject(new Error('Both current and new passwords are required'));\n    }\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n\n    // This would be a dedicated endpoint for changing password\n    return apiClient.post(`/users/${id}/changePassword`, {\n      currentPassword,\n      newPassword\n    });\n  },\n  getUserActivity: id => {\n    // In a real implementation, this would be a dedicated endpoint\n    // For now, we're combining data from different endpoints\n    return Promise.all([apiClient.get(`/questions/author/${id}`), apiClient.get(`/answers/author/${id}`)\n    // We could also get votes, comments, etc.\n    ]).then(([questionsRes, answersRes]) => {\n      const questions = questionsRes.data || [];\n      const answers = answersRes.data || [];\n\n      // Create timeline of activity\n      const activities = [...questions.map(q => ({\n        type: 'question',\n        id: q.id,\n        title: q.title,\n        date: q.createdAt,\n        votes: q.votes || 0,\n        link: `/questions/${q.id}`\n      })), ...answers.map(a => ({\n        type: 'answer',\n        id: a.id,\n        questionId: a.questionId,\n        questionTitle: a.questionTitle || \"Question\",\n        date: a.createdAt,\n        votes: (a.upvotes || 0) - (a.downvotes || 0),\n        accepted: a.accepted,\n        link: `/questions/${a.questionId}`\n      }))];\n\n      // Sort by date, most recent first\n      activities.sort((a, b) => new Date(b.date) - new Date(a.date));\n      return {\n        data: activities\n      };\n    });\n  }\n};\n\n// Question related API calls - Matches QuestionController endpoints\nexport const questionService = {\n  getAllQuestions: () => apiClient.get(`/questions/all`),\n  getQuestionById: id => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid question ID'));\n    }\n    return apiClient.get(`/questions/find/${id}`);\n  },\n  getQuestionsByAuthor: authorId => {\n    // Validate authorId before sending to backend\n    if (authorId === undefined || authorId === null || authorId === 'undefined' || authorId === 'null') {\n      return Promise.reject(new Error('Invalid author ID'));\n    }\n    return apiClient.get(`/questions/author/${authorId}`);\n  },\n  getQuestionsByTag: tagName => apiClient.get(`/questions/tag/${tagName}`),\n  getQuestionsByStatus: status => apiClient.get(`/questions/status/${status}`),\n  searchQuestions: keyword => {\n    if (!keyword || keyword.trim() === '') {\n      return Promise.reject(new Error('Search keyword is required'));\n    }\n    console.log(\"Searching questions with keyword:\", keyword);\n    return apiClient.get(`/questions/search?keyword=${encodeURIComponent(keyword)}`).then(response => {\n      console.log(\"Question search response:\", response);\n      return response;\n    }).catch(error => {\n      console.error(\"Error searching questions:\", error);\n      throw error;\n    });\n  },\n  createQuestion: (authorId, title, text, image, tags) => {\n    // Validate inputs before sending to backend\n    if (!authorId || authorId === 'undefined') {\n      return Promise.reject(new Error('Author ID is required'));\n    }\n    if (!title || title.trim() === '') {\n      return Promise.reject(new Error('Title is required'));\n    }\n    if (!text || text.trim() === '') {\n      return Promise.reject(new Error('Question text is required'));\n    }\n    return apiClient.post(`/questions/create`, {\n      authorId,\n      title,\n      text,\n      image,\n      tags\n    });\n  },\n  updateQuestion: (id, data, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    return apiClient.put(`/questions/update/${id}?userId=${userId}`, data);\n  },\n  acceptAnswer: (questionId, answerId) => {\n    // Validate inputs before sending to backend\n    if (!questionId || questionId === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!answerId || answerId === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    return apiClient.put(`/questions/${questionId}/accept/${answerId}`);\n  },\n  deleteQuestion: (id, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    return apiClient.delete(`/questions/delete/${id}?userId=${userId}`);\n  }\n};\n\n// Answer related API calls - Matches AnswerController endpoints\nexport const answerService = {\n  getAllAnswers: () => apiClient.get(`/answers/all`),\n  getAnswerById: id => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid answer ID'));\n    }\n    return apiClient.get(`/answers/id/${id}`);\n  },\n  getAnswersByQuestion: questionId => {\n    // Validate questionId before sending to backend\n    if (questionId === undefined || questionId === null || questionId === 'undefined' || questionId === 'null') {\n      return Promise.reject(new Error('Invalid question ID'));\n    }\n    return apiClient.get(`/answers/question/${questionId}`);\n  },\n  getAnswersByAuthor: authorId => {\n    // Validate authorId before sending to backend\n    if (authorId === undefined || authorId === null || authorId === 'undefined' || authorId === 'null') {\n      return Promise.reject(new Error('Invalid author ID'));\n    }\n    return apiClient.get(`/answers/author/${authorId}`);\n  },\n  debugAnswer: (authorId, questionId, text, code) => {\n    // Validate inputs\n    if (!questionId || questionId === 'undefined') {\n      return Promise.reject(new Error(\"Invalid question ID\"));\n    }\n    if (!authorId || authorId === 'undefined') {\n      return Promise.reject(new Error(\"Invalid author ID\"));\n    }\n    const payload = {\n      id: String(questionId),\n      authorId: String(authorId),\n      text: text || \"Test answer\",\n      image: code || \"\"\n    };\n    console.log(\"Debug answer with payload:\", payload);\n    return apiClient.post(`/answers/debug`, payload);\n  },\n  createAnswer: (authorId, questionId, text, code) => {\n    // Validate inputs with stronger checks\n    if (questionId === undefined || questionId === null || questionId === 'undefined' || questionId === 'null') {\n      return Promise.reject(new Error(\"Invalid question ID\"));\n    }\n    if (authorId === undefined || authorId === null || authorId === 'undefined' || authorId === 'null') {\n      return Promise.reject(new Error(\"Invalid author ID\"));\n    }\n    if (!text || text.trim() === '') {\n      return Promise.reject(new Error(\"Answer text cannot be empty\"));\n    }\n    try {\n      const numQuestionId = Number(questionId);\n      const numAuthorId = Number(authorId);\n      if (isNaN(numQuestionId) || isNaN(numAuthorId)) {\n        return Promise.reject(new Error(\"Invalid ID format\"));\n      }\n\n      // Use the direct-create endpoint with query parameters\n      return apiClient.post(`/answers/direct-create`, null, {\n        params: {\n          questionId: numQuestionId,\n          authorId: numAuthorId,\n          text: text.trim(),\n          image: code || \"\"\n        }\n      });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  },\n  updateAnswer: (id, data, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    return apiClient.put(`/answers/update/${id}?userId=${userId}`, data);\n  },\n  deleteAnswer: (id, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    return apiClient.delete(`/answers/delete/${id}?userId=${userId}`);\n  }\n};\n\n// Vote related API calls - Matches VoteController endpoints\nexport const voteService = {\n  getAllVotes: () => apiClient.get(`/votes/all`),\n  getVoteById: id => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid vote ID'));\n    }\n    return apiClient.get(`/votes/id/${id}`);\n  },\n  getVotesByUser: userId => {\n    // Validate userId before sending to backend\n    if (userId === undefined || userId === null || userId === 'undefined' || userId === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    return apiClient.get(`/votes/user/${userId}`);\n  },\n  voteQuestion: (userId, questionId, voteType) => {\n    // Validate inputs before sending to backend\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    if (!questionId || questionId === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!voteType) {\n      return Promise.reject(new Error('Vote type is required'));\n    }\n    return apiClient.post(`/votes/question`, {\n      userId,\n      questionId,\n      voteType\n    });\n  },\n  voteAnswer: (userId, answerId, voteType) => {\n    // Validate inputs before sending to backend\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    if (!answerId || answerId === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    if (!voteType) {\n      return Promise.reject(new Error('Vote type is required'));\n    }\n    return apiClient.post(`/votes/answer`, {\n      userId,\n      answerId,\n      voteType\n    });\n  },\n  deleteVote: id => {\n    // Validate id before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Vote ID is required'));\n    }\n    return apiClient.delete(`/votes/delete/${id}`);\n  }\n};\n\n// Tag related API calls - Matches TagController endpoints (note the URL is /tag not /tags)\nexport const tagService = {\n  getAllTags: () => apiClient.get(`/tag/all`),\n  getTagById: id => apiClient.get(`/tag/id/${id}`),\n  getTagByName: name => apiClient.get(`/tag/name/${name}`),\n  createTag: name => apiClient.post(`/tag/create`, {\n    name\n  }),\n  updateTag: (id, name) => apiClient.put(`/tag/update/${id}`, {\n    name\n  }),\n  deleteTag: id => apiClient.delete(`/tag/delete/${id}`)\n};\n\n// Combined search service for searching across different entities\nexport const searchService = {\n  // Global search across questions and users\n  globalSearch: async keyword => {\n    if (!keyword || keyword.trim() === '') {\n      return Promise.reject(new Error('Search keyword is required'));\n    }\n    try {\n      console.log(\"Starting global search for:\", keyword);\n\n      // Try to get questions first\n      let questions = [];\n      let users = [];\n      try {\n        console.log(\"Searching questions for:\", keyword);\n        const questionsResponse = await questionService.searchQuestions(keyword);\n        console.log(\"Questions search response:\", questionsResponse);\n        questions = questionsResponse.data || [];\n      } catch (error) {\n        console.error(\"Error searching questions:\", error);\n      }\n      try {\n        console.log(\"Searching users for:\", keyword);\n        const usersResponse = await userService.searchUsers(keyword);\n        console.log(\"Users search response:\", usersResponse);\n        users = usersResponse.data || [];\n      } catch (error) {\n        console.error(\"Error searching users:\", error);\n      }\n      const results = {\n        questions,\n        users\n      };\n      console.log(\"Combined search results:\", results);\n      return {\n        data: results\n      };\n    } catch (error) {\n      console.error(\"Global search error:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","interceptors","request","use","error","Promise","reject","response","Array","isArray","data","config","url","includes","map","item","questionId","id","apiClient","create","baseURL","headers","userService","login","username","password","post","register","email","phoneNumber","getUserById","undefined","Error","get","getUserByUsername","updateUser","put","getAllUsers","searchUsers","keyword","trim","encodeURIComponent","getUserStatistics","then","user","questionsRes","answersRes","all","questions","answers","stats","questionsCount","length","answersCount","acceptedAnswersCount","filter","a","accepted","totalVotes","reduce","sum","q","votes","upvotes","downvotes","joinDate","createdAt","reputation","badges","updateUserProfile","profileData","changePassword","currentPassword","newPassword","getUserActivity","activities","type","title","date","link","questionTitle","sort","b","Date","questionService","getAllQuestions","getQuestionById","getQuestionsByAuthor","authorId","getQuestionsByTag","tagName","getQuestionsByStatus","status","searchQuestions","console","log","catch","createQuestion","text","image","tags","updateQuestion","userId","acceptAnswer","answerId","deleteQuestion","delete","answerService","getAllAnswers","getAnswerById","getAnswersByQuestion","getAnswersByAuthor","debugAnswer","code","payload","String","createAnswer","numQuestionId","Number","numAuthorId","isNaN","params","err","updateAnswer","deleteAnswer","voteService","getAllVotes","getVoteById","getVotesByUser","voteQuestion","voteType","voteAnswer","deleteVote","tagService","getAllTags","getTagById","getTagByName","name","createTag","updateTag","deleteTag","searchService","globalSearch","users","questionsResponse","usersResponse","results"],"sources":["/Users/danielrad/Desktop/QZ/Coding/Facultate/PS/StackUnderflow/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use direct backend URL instead of proxy\nconst API_URL = 'http://localhost:8080';\n\n// Add basic request/response interceptors\naxios.interceptors.request.use(request => {\n  return request;\n}, error => {\n  return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n  // Ensure both id and questionId are present in question objects\n  if (Array.isArray(response.data) && response.config.url.includes('/questions/')) {\n    response.data = response.data.map(item => {\n      // Handle case where questionId exists but id doesn't\n      if (item.questionId && !item.id) {\n        return { ...item, id: item.questionId };\n      } \n      // Handle case where id exists but questionId doesn't\n      else if (item.id && !item.questionId) {\n        return { ...item, questionId: item.id };\n      }\n      return item;\n    });\n  }\n  // Handle single question object\n  else if (response.data && !Array.isArray(response.data) && response.config.url.includes('/questions/')) {\n    const item = response.data;\n    if (item.questionId && !item.id) {\n      response.data = { ...item, id: item.questionId };\n    } else if (item.id && !item.questionId) {\n      response.data = { ...item, questionId: item.id };\n    }\n  }\n  \n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Create axios instance with CORS config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// User related API calls - Matches UserController endpoints\nexport const userService = {\n  login: (username, password) => apiClient.post(`/users/login`, { username, password }),\n  register: (username, email, password, phoneNumber) => apiClient.post(`/users/create`, { username, email, password, phoneNumber }),\n  getUserById: (id) => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    return apiClient.get(`/users/id/${id}`);\n  },\n  getUserByUsername: (username) => apiClient.get(`/users/username/${username}`),\n  updateUser: (id, data) => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    return apiClient.put(`/users/${id}`, data);\n  },\n  getAllUsers: () => apiClient.get(`/users/all`),\n  \n  // Search for users by keyword\n  searchUsers: (keyword) => {\n    if (!keyword || keyword.trim() === '') {\n      return Promise.reject(new Error('Search keyword is required'));\n    }\n    return apiClient.get(`/users/search?keyword=${encodeURIComponent(keyword)}`);\n  },\n  \n  // New methods for enhanced user profile functionality\n  getUserStatistics: (id) => {\n    // This would ideally be a backend endpoint, but we'll simulate it with data we already have\n    // In a real implementation, you would create this endpoint in the backend\n    return apiClient.get(`/users/id/${id}`)\n      .then(async (response) => {\n        const user = response.data;\n        \n        // Get user's questions and answers\n        const [questionsRes, answersRes] = await Promise.all([\n          apiClient.get(`/questions/author/${id}`),\n          apiClient.get(`/answers/author/${id}`)\n        ]);\n        \n        const questions = questionsRes.data || [];\n        const answers = answersRes.data || [];\n        \n        // Calculate statistics\n        const stats = {\n          questionsCount: questions.length,\n          answersCount: answers.length,\n          acceptedAnswersCount: answers.filter(a => a.accepted).length,\n          totalVotes: (questions.reduce((sum, q) => sum + (q.votes || 0), 0) + \n                      answers.reduce((sum, a) => sum + ((a.upvotes || 0) - (a.downvotes || 0)), 0)),\n          joinDate: user.createdAt,\n          reputation: user.reputation || 0,\n          badges: user.badges || []\n        };\n        \n        return { data: stats };\n      });\n  },\n  \n  updateUserProfile: (id, profileData) => {\n    // Validate data\n    if (!profileData) {\n      return Promise.reject(new Error('Profile data is required'));\n    }\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    \n    // This would be a PUT request to update the profile\n    return apiClient.put(`/users/${id}`, profileData);\n  },\n  \n  changePassword: (id, currentPassword, newPassword) => {\n    // Validate data\n    if (!currentPassword || !newPassword) {\n      return Promise.reject(new Error('Both current and new passwords are required'));\n    }\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    \n    // This would be a dedicated endpoint for changing password\n    return apiClient.post(`/users/${id}/changePassword`, {\n      currentPassword,\n      newPassword\n    });\n  },\n  \n  getUserActivity: (id) => {\n    // In a real implementation, this would be a dedicated endpoint\n    // For now, we're combining data from different endpoints\n    return Promise.all([\n      apiClient.get(`/questions/author/${id}`),\n      apiClient.get(`/answers/author/${id}`),\n      // We could also get votes, comments, etc.\n    ]).then(([questionsRes, answersRes]) => {\n      const questions = questionsRes.data || [];\n      const answers = answersRes.data || [];\n      \n      // Create timeline of activity\n      const activities = [\n        ...questions.map(q => ({\n          type: 'question',\n          id: q.id,\n          title: q.title,\n          date: q.createdAt,\n          votes: q.votes || 0,\n          link: `/questions/${q.id}`\n        })),\n        ...answers.map(a => ({\n          type: 'answer',\n          id: a.id,\n          questionId: a.questionId,\n          questionTitle: a.questionTitle || \"Question\",\n          date: a.createdAt,\n          votes: (a.upvotes || 0) - (a.downvotes || 0),\n          accepted: a.accepted,\n          link: `/questions/${a.questionId}`\n        }))\n      ];\n      \n      // Sort by date, most recent first\n      activities.sort((a, b) => new Date(b.date) - new Date(a.date));\n      \n      return { data: activities };\n    });\n  }\n};\n\n// Question related API calls - Matches QuestionController endpoints\nexport const questionService = {\n  getAllQuestions: () => apiClient.get(`/questions/all`),\n  getQuestionById: (id) => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid question ID'));\n    }\n    return apiClient.get(`/questions/find/${id}`);\n  },\n  getQuestionsByAuthor: (authorId) => {\n    // Validate authorId before sending to backend\n    if (authorId === undefined || authorId === null || authorId === 'undefined' || authorId === 'null') {\n      return Promise.reject(new Error('Invalid author ID'));\n    }\n    return apiClient.get(`/questions/author/${authorId}`);\n  },\n  getQuestionsByTag: (tagName) => apiClient.get(`/questions/tag/${tagName}`),\n  getQuestionsByStatus: (status) => apiClient.get(`/questions/status/${status}`),\n  searchQuestions: (keyword) => {\n    if (!keyword || keyword.trim() === '') {\n      return Promise.reject(new Error('Search keyword is required'));\n    }\n    console.log(\"Searching questions with keyword:\", keyword);\n    return apiClient.get(`/questions/search?keyword=${encodeURIComponent(keyword)}`)\n      .then(response => {\n        console.log(\"Question search response:\", response);\n        return response;\n      })\n      .catch(error => {\n        console.error(\"Error searching questions:\", error);\n        throw error;\n      });\n  },\n  createQuestion: (authorId, title, text, image, tags) => {\n    // Validate inputs before sending to backend\n    if (!authorId || authorId === 'undefined') {\n      return Promise.reject(new Error('Author ID is required'));\n    }\n    if (!title || title.trim() === '') {\n      return Promise.reject(new Error('Title is required'));\n    }\n    if (!text || text.trim() === '') {\n      return Promise.reject(new Error('Question text is required'));\n    }\n    \n    return apiClient.post(`/questions/create`, { authorId, title, text, image, tags });\n  },\n  updateQuestion: (id, data, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    \n    return apiClient.put(`/questions/update/${id}?userId=${userId}`, data);\n  },\n  acceptAnswer: (questionId, answerId) => {\n    // Validate inputs before sending to backend\n    if (!questionId || questionId === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!answerId || answerId === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    \n    return apiClient.put(`/questions/${questionId}/accept/${answerId}`);\n  },\n  deleteQuestion: (id, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    \n    return apiClient.delete(`/questions/delete/${id}?userId=${userId}`);\n  }\n};\n\n// Answer related API calls - Matches AnswerController endpoints\nexport const answerService = {\n  getAllAnswers: () => apiClient.get(`/answers/all`),\n  getAnswerById: (id) => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid answer ID'));\n    }\n    return apiClient.get(`/answers/id/${id}`);\n  },\n  getAnswersByQuestion: (questionId) => {\n    // Validate questionId before sending to backend\n    if (questionId === undefined || questionId === null || questionId === 'undefined' || questionId === 'null') {\n      return Promise.reject(new Error('Invalid question ID'));\n    }\n    return apiClient.get(`/answers/question/${questionId}`);\n  },\n  getAnswersByAuthor: (authorId) => {\n    // Validate authorId before sending to backend\n    if (authorId === undefined || authorId === null || authorId === 'undefined' || authorId === 'null') {\n      return Promise.reject(new Error('Invalid author ID'));\n    }\n    return apiClient.get(`/answers/author/${authorId}`);\n  },\n  debugAnswer: (authorId, questionId, text, code) => {\n    // Validate inputs\n    if (!questionId || questionId === 'undefined') {\n      return Promise.reject(new Error(\"Invalid question ID\"));\n    }\n    \n    if (!authorId || authorId === 'undefined') {\n      return Promise.reject(new Error(\"Invalid author ID\"));\n    }\n    \n    const payload = { \n      id: String(questionId), \n      authorId: String(authorId), \n      text: text || \"Test answer\", \n      image: code || \"\" \n    };\n    \n    console.log(\"Debug answer with payload:\", payload);\n    return apiClient.post(`/answers/debug`, payload);\n  },\n  createAnswer: (authorId, questionId, text, code) => {\n    // Validate inputs with stronger checks\n    if (questionId === undefined || questionId === null || questionId === 'undefined' || questionId === 'null') {\n      return Promise.reject(new Error(\"Invalid question ID\"));\n    }\n    \n    if (authorId === undefined || authorId === null || authorId === 'undefined' || authorId === 'null') {\n      return Promise.reject(new Error(\"Invalid author ID\"));\n    }\n    \n    if (!text || text.trim() === '') {\n      return Promise.reject(new Error(\"Answer text cannot be empty\"));\n    }\n    \n    try {\n      const numQuestionId = Number(questionId);\n      const numAuthorId = Number(authorId);\n      \n      if (isNaN(numQuestionId) || isNaN(numAuthorId)) {\n        return Promise.reject(new Error(\"Invalid ID format\"));\n      }\n      \n      // Use the direct-create endpoint with query parameters\n      return apiClient.post(`/answers/direct-create`, null, { \n        params: {\n          questionId: numQuestionId,\n          authorId: numAuthorId,\n          text: text.trim(),\n          image: code || \"\"\n        }\n      });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  },\n  updateAnswer: (id, data, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    \n    return apiClient.put(`/answers/update/${id}?userId=${userId}`, data);\n  },\n  deleteAnswer: (id, userId) => {\n    // Validate inputs before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    \n    return apiClient.delete(`/answers/delete/${id}?userId=${userId}`);\n  }\n};\n\n// Vote related API calls - Matches VoteController endpoints\nexport const voteService = {\n  getAllVotes: () => apiClient.get(`/votes/all`),\n  getVoteById: (id) => {\n    // Validate id before sending to backend\n    if (id === undefined || id === null || id === 'undefined' || id === 'null') {\n      return Promise.reject(new Error('Invalid vote ID'));\n    }\n    return apiClient.get(`/votes/id/${id}`);\n  },\n  getVotesByUser: (userId) => {\n    // Validate userId before sending to backend\n    if (userId === undefined || userId === null || userId === 'undefined' || userId === 'null') {\n      return Promise.reject(new Error('Invalid user ID'));\n    }\n    return apiClient.get(`/votes/user/${userId}`);\n  },\n  voteQuestion: (userId, questionId, voteType) => {\n    // Validate inputs before sending to backend\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    if (!questionId || questionId === 'undefined') {\n      return Promise.reject(new Error('Question ID is required'));\n    }\n    if (!voteType) {\n      return Promise.reject(new Error('Vote type is required'));\n    }\n    \n    return apiClient.post(`/votes/question`, { userId, questionId, voteType });\n  },\n  voteAnswer: (userId, answerId, voteType) => {\n    // Validate inputs before sending to backend\n    if (!userId || userId === 'undefined') {\n      return Promise.reject(new Error('User ID is required'));\n    }\n    if (!answerId || answerId === 'undefined') {\n      return Promise.reject(new Error('Answer ID is required'));\n    }\n    if (!voteType) {\n      return Promise.reject(new Error('Vote type is required'));\n    }\n    \n    return apiClient.post(`/votes/answer`, { userId, answerId, voteType });\n  },\n  deleteVote: (id) => {\n    // Validate id before sending to backend\n    if (!id || id === 'undefined') {\n      return Promise.reject(new Error('Vote ID is required'));\n    }\n    return apiClient.delete(`/votes/delete/${id}`);\n  }\n};\n\n// Tag related API calls - Matches TagController endpoints (note the URL is /tag not /tags)\nexport const tagService = {\n  getAllTags: () => apiClient.get(`/tag/all`),\n  getTagById: (id) => apiClient.get(`/tag/id/${id}`),\n  getTagByName: (name) => apiClient.get(`/tag/name/${name}`),\n  createTag: (name) => apiClient.post(`/tag/create`, { name }),\n  updateTag: (id, name) => apiClient.put(`/tag/update/${id}`, { name }),\n  deleteTag: (id) => apiClient.delete(`/tag/delete/${id}`)\n};\n\n// Combined search service for searching across different entities\nexport const searchService = {\n  // Global search across questions and users\n  globalSearch: async (keyword) => {\n    if (!keyword || keyword.trim() === '') {\n      return Promise.reject(new Error('Search keyword is required'));\n    }\n    \n    try {\n      console.log(\"Starting global search for:\", keyword);\n      \n      // Try to get questions first\n      let questions = [];\n      let users = [];\n      \n      try {\n        console.log(\"Searching questions for:\", keyword);\n        const questionsResponse = await questionService.searchQuestions(keyword);\n        console.log(\"Questions search response:\", questionsResponse);\n        questions = questionsResponse.data || [];\n      } catch (error) {\n        console.error(\"Error searching questions:\", error);\n      }\n      \n      try {\n        console.log(\"Searching users for:\", keyword);\n        const usersResponse = await userService.searchUsers(keyword);\n        console.log(\"Users search response:\", usersResponse);\n        users = usersResponse.data || [];\n      } catch (error) {\n        console.error(\"Error searching users:\", error);\n      }\n      \n      const results = { questions, users };\n      console.log(\"Combined search results:\", results);\n      \n      return { data: results };\n    } catch (error) {\n      console.error(\"Global search error:\", error);\n      throw error;\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}