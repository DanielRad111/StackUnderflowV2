{"ast":null,"code":"import axios from 'axios';\nconst API_URL = ''; // Empty since we've set up proxy in package.json\n\n// User related API calls\nexport const userService = {\n  login: (username, password) => axios.post(`${API_URL}/users/login`, {\n    username,\n    password\n  }),\n  register: (username, email, password, phoneNumber) => axios.post(`${API_URL}/users/create`, {\n    username,\n    email,\n    password,\n    phoneNumber\n  }),\n  getUserById: id => axios.get(`${API_URL}/users/id/${id}`),\n  getUserByUsername: username => axios.get(`${API_URL}/users/username/${username}`),\n  updateUser: (id, data) => axios.put(`${API_URL}/users/${id}`, data),\n  getAllUsers: () => axios.get(`${API_URL}/users/all`)\n};\n\n// Question related API calls\nexport const questionService = {\n  getAllQuestions: () => axios.get(`${API_URL}/questions/all`),\n  getQuestionById: id => axios.get(`${API_URL}/questions/find/${id}`),\n  getQuestionsByAuthor: authorId => axios.get(`${API_URL}/questions/author/${authorId}`),\n  getQuestionsByTag: tagName => axios.get(`${API_URL}/questions/tag/${tagName}`),\n  getQuestionsByStatus: status => axios.get(`${API_URL}/questions/status/${status}`),\n  searchQuestions: keyword => axios.get(`${API_URL}/questions/search?keyword=${keyword}`),\n  createQuestion: (authorId, title, text, image, tags) => axios.post(`${API_URL}/questions/create`, {\n    authorId,\n    title,\n    text,\n    image,\n    tags\n  }),\n  updateQuestion: (id, data, userId) => axios.put(`${API_URL}/questions/update/${id}?userId=${userId}`, data),\n  acceptAnswer: (questionId, answerId) => axios.put(`${API_URL}/questions/${questionId}/accept/${answerId}`),\n  deleteQuestion: (id, userId) => axios.delete(`${API_URL}/questions/delete/${id}?userId=${userId}`)\n};\n\n// Answer related API calls\nexport const answerService = {\n  getAnswersByQuestion: questionId => axios.get(`${API_URL}/answers/question/${questionId}`),\n  createAnswer: (authorId, questionId, text, code) => axios.post(`${API_URL}/answers/create`, {\n    authorId,\n    questionId,\n    text,\n    code\n  }),\n  updateAnswer: (id, data, userId) => axios.put(`${API_URL}/answers/update/${id}?userId=${userId}`, data),\n  deleteAnswer: (id, userId) => axios.delete(`${API_URL}/answers/delete/${id}?userId=${userId}`)\n};\n\n// Vote related API calls\nexport const voteService = {\n  voteQuestion: (userId, questionId, voteType) => axios.post(`${API_URL}/votes/question`, {\n    userId,\n    questionId,\n    voteType\n  }),\n  voteAnswer: (userId, answerId, voteType) => axios.post(`${API_URL}/votes/answer`, {\n    userId,\n    answerId,\n    voteType\n  })\n};\n\n// Tag related API calls\nexport const tagService = {\n  getAllTags: () => axios.get(`${API_URL}/tags/all`),\n  getTagByName: name => axios.get(`${API_URL}/tags/${name}`)\n};","map":{"version":3,"names":["axios","API_URL","userService","login","username","password","post","register","email","phoneNumber","getUserById","id","get","getUserByUsername","updateUser","data","put","getAllUsers","questionService","getAllQuestions","getQuestionById","getQuestionsByAuthor","authorId","getQuestionsByTag","tagName","getQuestionsByStatus","status","searchQuestions","keyword","createQuestion","title","text","image","tags","updateQuestion","userId","acceptAnswer","questionId","answerId","deleteQuestion","delete","answerService","getAnswersByQuestion","createAnswer","code","updateAnswer","deleteAnswer","voteService","voteQuestion","voteType","voteAnswer","tagService","getAllTags","getTagByName","name"],"sources":["/Users/danielrad/Desktop/QZ/Coding/Facultate/PS/StackUnderflow/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = '';  // Empty since we've set up proxy in package.json\n\n// User related API calls\nexport const userService = {\n  login: (username, password) => axios.post(`${API_URL}/users/login`, { username, password }),\n  register: (username, email, password, phoneNumber) => axios.post(`${API_URL}/users/create`, { username, email, password, phoneNumber }),\n  getUserById: (id) => axios.get(`${API_URL}/users/id/${id}`),\n  getUserByUsername: (username) => axios.get(`${API_URL}/users/username/${username}`),\n  updateUser: (id, data) => axios.put(`${API_URL}/users/${id}`, data),\n  getAllUsers: () => axios.get(`${API_URL}/users/all`)\n};\n\n// Question related API calls\nexport const questionService = {\n  getAllQuestions: () => axios.get(`${API_URL}/questions/all`),\n  getQuestionById: (id) => axios.get(`${API_URL}/questions/find/${id}`),\n  getQuestionsByAuthor: (authorId) => axios.get(`${API_URL}/questions/author/${authorId}`),\n  getQuestionsByTag: (tagName) => axios.get(`${API_URL}/questions/tag/${tagName}`),\n  getQuestionsByStatus: (status) => axios.get(`${API_URL}/questions/status/${status}`),\n  searchQuestions: (keyword) => axios.get(`${API_URL}/questions/search?keyword=${keyword}`),\n  createQuestion: (authorId, title, text, image, tags) => \n    axios.post(`${API_URL}/questions/create`, { authorId, title, text, image, tags }),\n  updateQuestion: (id, data, userId) => axios.put(`${API_URL}/questions/update/${id}?userId=${userId}`, data),\n  acceptAnswer: (questionId, answerId) => axios.put(`${API_URL}/questions/${questionId}/accept/${answerId}`),\n  deleteQuestion: (id, userId) => axios.delete(`${API_URL}/questions/delete/${id}?userId=${userId}`)\n};\n\n// Answer related API calls\nexport const answerService = {\n  getAnswersByQuestion: (questionId) => axios.get(`${API_URL}/answers/question/${questionId}`),\n  createAnswer: (authorId, questionId, text, code) => \n    axios.post(`${API_URL}/answers/create`, { authorId, questionId, text, code }),\n  updateAnswer: (id, data, userId) => axios.put(`${API_URL}/answers/update/${id}?userId=${userId}`, data),\n  deleteAnswer: (id, userId) => axios.delete(`${API_URL}/answers/delete/${id}?userId=${userId}`)\n};\n\n// Vote related API calls\nexport const voteService = {\n  voteQuestion: (userId, questionId, voteType) => \n    axios.post(`${API_URL}/votes/question`, { userId, questionId, voteType }),\n  voteAnswer: (userId, answerId, voteType) => \n    axios.post(`${API_URL}/votes/answer`, { userId, answerId, voteType })\n};\n\n// Tag related API calls\nexport const tagService = {\n  getAllTags: () => axios.get(`${API_URL}/tags/all`),\n  getTagByName: (name) => axios.get(`${API_URL}/tags/${name}`)\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}